{{define "DATAREADRESFUNC" }}
func dataSource{{.fpath}}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*apiClient).Client
	// c.Retries = 1
	
    urlparams := &models.CmdbRequestParams{}
	vdomparam := ""
	if v, ok := d.GetOk("vdomparam"); ok {
		if s, ok := v.(string); ok {
			vdomparam = s
		}
	}
	urlparams.Vdom = vdomparam

	{{if eq .results.category "complex"}}mkey := "{{.fpath}}"{{else}}
	i := d.Get("{{if or (eq .results.mkey "id") (eq .results.mkey "count")}}fos{{end}}{{(flatten .results.mkey)}}")
	mkey := utils.ParseMkey(i){{end}}

	o, err := c.Cmdb.Read{{.fpath}}(mkey, urlparams)
	if err != nil {
		return diag.Errorf("error reading {{.fpath}} dataSource: %v", err)
	}

	if o == nil {
		log.Printf("[WARN] dataSource (%s) not found, removing from state", d.Id())
		d.SetId("")
		return nil
	}

	sort := false
	if v, ok := d.GetOk("dynamic_sort_subtable"); ok {
		if b, ok := v.(bool); ok {
			sort = b
		}
	}

	diags := refreshObject{{.fpath}}(d, o, c.Config.Fv, sort)
	if diags.HasError() {
		return diags
	}

	d.SetId(mkey)

	return nil
}
{{ end }}