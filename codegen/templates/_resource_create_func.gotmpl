{{ define "CREATERESFUNC" }}
func resource{{.fpath}}Create(d *schema.ResourceData, m interface{}) error {
	c := m.(*FortiClient).Client
	c.Retries = 1
	urlparams := make(map[string][]string)

	vdomparam := ""

	if v, ok := d.GetOk("vdomparam"); ok {
		if s, ok := v.(string); ok {
			vdomparam = s
		}
	}

	batchid := 0

	if v, ok := d.GetOk("batchid"); ok {
		if i, ok := v.(int); ok {
			batchid = i
		}
	}

{{if eq .results.mkey "name"}}

	allow_append := false

	if v, ok := d.GetOk("allow_append"); ok {
		if b, ok := v.(bool); ok {
			allow_append = b
		}
	}

	urlparams["allow_append"] = []string{strconv.FormatBool(allow_append)}

	key := {{.results.mkey | printf "%q"}}
	mkey := ""
	if v, ok := d.GetOk(key); ok {
		if s, ok := v.(string); ok {
			mkey = s
		}
	}
{{end}}

	obj, err := getObject{{.fpath}}(d, c.Fv)
	if err != nil {
		return fmt.Errorf("error creating {{.fpath}} resource while getting object: %v", err)
	}
{{if eq .results.mkey "name"}}
	if mkey == "" && allow_append {
		return fmt.Errorf("error creating {{.fpath}} resource: %q must be set if \"allow_append\" is true", key)
	}

	o := make(map[string]interface{})
	if mkey != "" && allow_append {
		o, err = c.Update{{.fpath}}(obj, mkey, vdomparam, urlparams, batchid)
	} else {
		o, err = c.Create{{.fpath}}(obj, vdomparam, urlparams, batchid)
	}
{{else}}
	o, err := c.Create{{.fpath}}(obj, vdomparam, urlparams, batchid)
{{end}}
	if err != nil {
		return fmt.Errorf("error creating {{.fpath}} resource: %v", err)
	}

	if o["mkey"] != nil && o["mkey"] != "" {
		{{if eq .results.mkey_type "integer"}}d.SetId(strconv.Itoa(int(o["mkey"].(float64)))){{else}}d.SetId(o["mkey"].(string)){{end}}
	} else {
		d.SetId("{{.fpath}}")
	}

	return resource{{.fpath}}Read(d, m)
}
{{ end }}