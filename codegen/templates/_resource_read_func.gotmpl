{{define "READRESFUNC" }}
func resource{{.fpath}}Read(d *schema.ResourceData, m interface{}) error {
	mkey := d.Id()

	c := m.(*FortiClient).Client
	c.Retries = 1
    urlparams := make(map[string][]string)

	vdomparam := ""

	if v, ok := d.GetOk("vdomparam"); ok {
		if s, ok := v.(string); ok {
			vdomparam = s
		}
	}

	batchid := 0

	if v, ok := d.GetOk("batchid"); ok {
		if i, ok := v.(int); ok {
			batchid = i
		}
	}

	o, err := c.Read{{.fpath}}(mkey, vdomparam, urlparams, batchid)
	if err != nil {
		return fmt.Errorf("error reading {{.fpath}} resource: %v", err)
	}

	if o == nil {
		log.Printf("[WARN] resource (%s) not found, removing from state", d.Id())
		d.SetId("")
		return nil
	}

	err = refreshObject{{.fpath}}(d, o, c.Fv)
	if err != nil {
		return fmt.Errorf("error reading {{.fpath}} resource from API: %v", err)
	}
	return nil
}
{{ end }}