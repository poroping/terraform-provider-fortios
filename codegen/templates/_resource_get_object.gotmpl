{{ define "GETOBJECT" }}
func getObject{{.fpath}}(d *schema.ResourceData, sv string) (*map[string]interface{}, error) {
	obj := make(map[string]interface{})
{{ template "GETOBJECTS" .results}}
	return &obj, nil
}
{{ end }}
{{ define "GETOBJECTS" }}
{{- range $key, $value := .children }}
{{ if $value.complex_parent }}
	if bemptysontable {
		obj[{{$value.name | printf "%q" }}] = make([]struct{}, 0)
	} else {{ end }}
	if v, ok := d.GetOk({{(flatten $value.name) | printf "%q" }}); ok {
		t, err := expand{{.fpath}}(d, v, {{(flatten $value.name) | printf "%q" }}, sv)
		if err != nil {
			return &obj, err
		} else if t != nil {
			obj[{{- if $value.fosid -}}"id"{{- else -}}{{$value.name | printf "%q" }}{{- end -}}] = t
		}
	}{{- if eq $value.category "table" }} else if d.HasChange({{(flatten $value.name) | printf "%q" }}) {
		old, new := d.GetChange({{(flatten $value.name) | printf "%q" }})
		if len(old.([]interface{})) > 0 && len(new.([]interface{})) == 0 {
			obj[{{$value.name | printf "%q" }}] = make([]struct{}, 0)
		}
	}{{- end }}
	{{ if $value.complex_parent }}}{{ end }}

{{ end }}
{{ end }}